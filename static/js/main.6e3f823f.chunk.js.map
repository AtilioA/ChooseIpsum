{"version":3,"sources":["../../src/utils/getSample.js","../../src/utils/getRandomInt.js","../../src/lib/sentences.js","../../src/lib/generateIpsum.js","components/Container/index.js","components/Header/index.js","components/Poster/index.js","components/CopyButton/index.js","components/Footer/index.js","pages/Main/index.js","routes.js","styles/global.js","App.js","index.js"],"names":["getSample","inputArray","sampleSize","result","Array","inputArrayLen","length","taken","RangeError","x","Math","floor","random","getRandomInt","min","max","ceil","vanillaSentences","swearSentences","politicalSentences","chooseLifePasta","generateParagraphs","nParagraphs","swear","political","startWithChooseLife","endWithChooseIpsum","text","maxParagraphs","allSentences","concat","randomParagraphs","i","randomSentences","push","join","generateSentences","nSentences","maxSentences","sentences","Container","styled","div","Header","darken","Poster","CopyButton","Footer","Main","state","chooseIpsum","paragraphs","ipsumType","copySuccess","handleNumberInputChange","changeInputEvent","currentTarget","value","setState","handleOnKeyDownHandler","e","keyCode","handleClickGenerate","localStorage","getItem","this","JSON","parse","_","prevState","setItem","stringify","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","message","toggleCheckboxEvent","checked","console","log","changeRadioInputEvent","className","type","onChange","onKeyDown","id","name","defaultChecked","handleRadioChange","htmlFor","handleCheckboxChange","onClick","color","isArray","sendCopyToClipboardSuccess","transition","Slide","href","Component","Routes","path","component","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e3f823f.chunk.js","sourcesContent":["// Get number of random elements from array without repetition\r\nexport default function getSample(inputArray, sampleSize) {\r\n  var result = new Array(sampleSize),\r\n    inputArrayLen = inputArray.length,\r\n    taken = new Array(inputArrayLen);\r\n\r\n  if (sampleSize > inputArrayLen) {\r\n    throw new RangeError('getSample: more elements taken than available');\r\n  }\r\n\r\n  while (sampleSize--) {\r\n    var x = Math.floor(Math.random() * inputArrayLen);\r\n    result[sampleSize] = inputArray[x in taken ? taken[x] : x];\r\n    taken[x] = --inputArrayLen in taken ? taken[inputArrayLen] : inputArrayLen;\r\n  }\r\n\r\n  return result;\r\n}\r\n","export default function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n","export const vanillaSentences = [\r\n  'Choose walking freely during quarantine. ',\r\n  'Choose Xanax. ',\r\n  'Choose hydroxychloroquine. ',\r\n  'Choose a 4-hour daily commute. ',\r\n  'Choose day trading until your whole family is broke. ',\r\n  'Choose dictatorship. ',\r\n  'Choose your feed. ',\r\n  'Choose smart devices that spy on you and your body physiology. ',\r\n  'Choose wellness apps. ',\r\n  'Choose essential oils. ',\r\n  'Choose vaping. ',\r\n  'Choose Himalayan salt. ',\r\n  'Choose this lorem ipsum generator. ',\r\n  'Choose internet challenges. ',\r\n  'Choose good streaming services. ',\r\n  'Choose being fitter, happier. ',\r\n  'Choose your friends. ',\r\n  'Choose entrepreneurship. ',\r\n  'Choose disruption. ',\r\n  'Choose key performance indicators. ',\r\n  'Choose fads. ',\r\n  'Choose trends. ',\r\n  'Choose competition. ',\r\n  'Choose money. ',\r\n  'Choose a playlist. ',\r\n  'Choose yet another lorem ipsum generator. ',\r\n  'Choose a messenger owned by Facebook. ',\r\n  'Choose videogames with meaningless choices. ',\r\n  'Choose labels. ',\r\n  'Choose gig economy. ',\r\n  'Choose burnout syndrome. ',\r\n  'Choose creative idleness. ',\r\n  'Choose ending social distancing too soon. ',\r\n  'Choose chasing another fad hoping it will fix your life. ',\r\n  'Choose microtransactions. ',\r\n  'Choose mainstream. ',\r\n  'Choose hype. ',\r\n  \"Choose cheap ebooks that won't challenge you. \",\r\n  'Choose YA and chicklit and bland massproduced airport thrillers with sanitized violence. ',\r\n  'Choose being the victim of the Dunning-Kruger effect. ',\r\n  'Choose financing an used car. ',\r\n  'Choose whatever you want. ',\r\n  'Choose not being able to retire and old-age homelessness. ',\r\n  'Choose overpriced hardware. ',\r\n  'Choose an infinite jest. ',\r\n  'Choose not testing your software. ',\r\n  'Choose media violence. ',\r\n  'Choose mindless distractions but also mindfulness at work. ',\r\n  'Choose Alexa, Google Home, Siri. ',\r\n  'Choose hyper-productivity. ',\r\n  'Choose self-help. ',\r\n];\r\n\r\nexport const swearSentences = [\r\n  'Choose slut shaming. ',\r\n  'Choose revenge porn. ',\r\n  'Choose the same fucking password for every fucking online service. ',\r\n  'Choose not giving a f*ck. ',\r\n  'Choose cameras watching every fucking second of your day. ',\r\n];\r\n\r\nexport const politicalSentences = [\r\n  'Choose patriarchy, which consumes your very soul. ',\r\n  \"Choose shallow TV series poking at social issues without stepping out of the comfort zone and pretending they're actually not shallow. \",\r\n  'Choose the red pill. ',\r\n  'Choose mass shootings. ',\r\n  'Choose Zeitgeist and its addendum. ',\r\n  'Choose trans-exclusionary radical feminism. ',\r\n  'Choose gender before race. ',\r\n  'Choose a meme president. ',\r\n  'Choose slave-made clothes. ',\r\n  'Choose denialism. ',\r\n  'Choose flat Earth. ',\r\n  'Choose toxic masculinity. ',\r\n  'Choose neoliberalism. ',\r\n];\r\n\r\nexport const chooseLifePasta = `Choose life. Choose a job. Choose a career. Choose a family.\r\nChoose a fucking big television. Choose washing machines,\r\ncars, compact disc players, and electrical tin openers. Choose\r\ngood health, low cholesterol and dental insurance. Choose\r\nfixed- interest mortgage repayments. Choose a starter home.\r\nChoose your friends. Choose leisure wear and matching luggage.\r\nChoose a three-piece suit on hire purchase in a range of\r\nfucking fabrics. Choose DIY and wondering who the fuck you are\r\non a Sunday morning. Choose sitting on that couch watching\r\nmind-numbing spirit-crushing game shows, stuffing fucking junk\r\nfood into your mouth. Choose rotting away at the end of it\r\nall, pissing your last in a miserable home, nothing more than\r\nan embarrassment to the selfish, fucked-up brats you spawned\r\nto replace yourself.`;\r\n","import getSample from '../utils/getSample';\r\nimport getRandomInt from '../utils/getRandomInt';\r\n\r\nimport {\r\n  vanillaSentences,\r\n  swearSentences,\r\n  politicalSentences,\r\n} from './sentences';\r\n\r\nexport const maxSentences =\r\n  vanillaSentences.length + swearSentences.length + politicalSentences.length;\r\n\r\nexport const maxParagraphs = 50;\r\n\r\n// Generate lorem ipsum array with n paragraphs made of randomly chosen number of sentences\r\nexport function generateParagraphs(\r\n  nParagraphs,\r\n  swear = true,\r\n  political = true,\r\n  startWithChooseLife = true,\r\n  endWithChooseIpsum = true\r\n) {\r\n  if (nParagraphs > maxParagraphs) {\r\n    throw new RangeError({\r\n      text: `generateParagraphs: too many paragraphs requested ${nParagraphs}`,\r\n      maxParagraphs,\r\n    });\r\n  }\r\n\r\n  var allSentences = vanillaSentences;\r\n  if (swear) {\r\n    allSentences = allSentences.concat(swearSentences);\r\n  }\r\n  if (political) {\r\n    allSentences = allSentences.concat(politicalSentences);\r\n  }\r\n\r\n  var randomParagraphs = [];\r\n  var nSentences = 5;\r\n  for (let i = 0; i < nParagraphs; i++) {\r\n    nSentences = getRandomInt(5, 20);\r\n    var randomSentences = getSample(allSentences, nSentences);\r\n    randomParagraphs.push(randomSentences);\r\n  }\r\n\r\n  for (let i = 0; i < randomParagraphs.length; i++) {\r\n    randomParagraphs[i] = randomParagraphs[i].join('');\r\n\r\n    if (startWithChooseLife) {\r\n      randomParagraphs[i] = 'Choose life. ' + randomParagraphs[i];\r\n    }\r\n    if (endWithChooseIpsum) {\r\n      randomParagraphs[i] = randomParagraphs[i].concat(\r\n        'Choose Lorem. Choose Ipsum.'\r\n      );\r\n    }\r\n  }\r\n\r\n  return randomParagraphs;\r\n}\r\n\r\n// Generate lorem ipsum string from n randomly chosen sentences\r\nexport default function generateSentences(\r\n  nSentences,\r\n  swear = true,\r\n  political = true,\r\n  startWithChooseLife = true,\r\n  endWithChooseIpsum = true\r\n) {\r\n  var maxSentences = vanillaSentences.length;\r\n\r\n  var allSentences = vanillaSentences;\r\n  if (swear) {\r\n    allSentences = allSentences.concat(swearSentences);\r\n    maxSentences += swearSentences.length;\r\n  }\r\n  if (political) {\r\n    allSentences = allSentences.concat(politicalSentences);\r\n    maxSentences += politicalSentences.length;\r\n  }\r\n\r\n  if (nSentences > maxSentences) {\r\n    throw new RangeError(maxSentences);\r\n  }\r\n  var randomSentences = getSample(allSentences, nSentences);\r\n\r\n  var sentences = '';\r\n  for (var i = 0; i < nSentences; i++) {\r\n    sentences += randomSentences[i];\r\n  }\r\n\r\n  if (startWithChooseLife) {\r\n    sentences = 'Choose life. ' + sentences;\r\n  }\r\n  if (endWithChooseIpsum) {\r\n    sentences += 'Choose Lorem. Choose Ipsum.';\r\n  }\r\n\r\n  return sentences;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  /* display: flex; */\r\n\r\n  max-width: 600px;\r\n  background: #ec6917;\r\n  border-radius: 4px;\r\n  /* box-shadow: 0 0 20px rgba(0, 0, 0, 0.2); */\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  margin: 25px auto;\r\n\r\n  max-height: 100%;\r\n  /* overflow: scroll;\r\n  overflow-x: hidden; */\r\n\r\n  h1 {\r\n    font-size: 20px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  }\r\n\r\n  svg {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nimport { darken } from 'polished';\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  color: #fafafa;\r\n  align-items: center;\r\n  justify-content: center;\r\n  /* justify-content: space-between; */\r\n\r\n  font-size: 25px;\r\n  line-height: 20px;\r\n\r\n  /* padding-top: 15px;\r\n  padding-bottom: 8px;\r\n  padding-left: 15px; */\r\n\r\n  margin-bottom: 10px;\r\n\r\n  .flex-item-1 {\r\n    flex: 1;\r\n  }\r\n\r\n  /* Flex Item */\r\n  .item {\r\n    margin: 5px;\r\n    /* text-align: center; */\r\n    /* font-size: 1.5em; */\r\n  }\r\n\r\n  input {\r\n    background-color: transparent;\r\n    color: #26151b;\r\n    font-weight: bold;\r\n    font-size: 21px;\r\n    border: none;\r\n    border-bottom: 1px solid #aaa;\r\n    position: relative;\r\n    top: 5%;\r\n    width: 22%;\r\n    text-align: center;\r\n    margin-left: -3px;\r\n  }\r\n\r\n  /* Highlight input field */\r\n  input[type='number'],\r\n  textarea {\r\n    -webkit-transition: all 0.3s ease-in-out;\r\n    -moz-transition: all 0.3s ease-in-out;\r\n    -ms-transition: all 0.3s ease-in-out;\r\n    -o-transition: all 0.3s ease-in-out;\r\n    outline: none;\r\n    padding: 3px 0px 3px 3px;\r\n  }\r\n\r\n  input[type='number']:focus,\r\n  textarea:focus {\r\n    padding: 3px 0px 3px 3px;\r\n    border-bottom: 1px solid #fafafa;\r\n  }\r\n\r\n  /* Remove spin buttons */\r\n  input[type='number']::-webkit-inner-spin-button,\r\n  input[type='number']::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  input[type='radio'] {\r\n    margin-left: -7px;\r\n  }\r\n\r\n  input[type='radio']:checked {\r\n  }\r\n\r\n  input[type='radio']:checked + label {\r\n    font-weight: 600;\r\n  }\r\n\r\n  label {\r\n    font-size: 18px;\r\n  }\r\n\r\n  button {\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    background: #26151b;\r\n\r\n    color: #cabfad;\r\n    border: 0;\r\n    border-radius: 4px;\r\n    padding: 10px 18px;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    transition: background 0.5s;\r\n    width: 100%;\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n    transition: box-shadow 500ms;\r\n\r\n    &:hover {\r\n      background: ${darken(0.05, '#26151b')};\r\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nconst Poster = styled.div`\r\n  display: flex;\r\n  margin-top: 15px;\r\n  height: 710px;\r\n\r\n  background-color: #fefcfd;\r\n  color: #000000;\r\n\r\n  div.poster-frame {\r\n    display: flex;\r\n    flex: 1;\r\n    border: 8px solid #26151b;\r\n    height: 100%;\r\n    width: 100%;\r\n    /* padding: 10px; */\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\r\n    position: relative;\r\n  }\r\n\r\n  div.poster-content {\r\n    padding-top: 5px;\r\n    padding-left: 5px;\r\n    text-align: justify;\r\n    text-justify: inter-word;\r\n    padding-right: 10px;\r\n    line-height: 26px;\r\n    width: 90%;\r\n    height: 84%;\r\n    /* overflow-y: auto; */\r\n    overflow-x: hidden;\r\n    p {\r\n      font-size: 22px;\r\n    }\r\n    /* flex: 1; */\r\n  }\r\n\r\n  div.poster-footer {\r\n    color: #eee;\r\n    /* box-shadow: 0 0 20px rgba(0, 0, 0, 0.5); */\r\n    height: 14.5%;\r\n    line-height: 45px;\r\n    position: absolute;\r\n    bottom: 0;\r\n\r\n    h2 {\r\n      font-size: 32px;\r\n      color: #000000;\r\n    }\r\n\r\n    h1 {\r\n      color: #ec6917;\r\n      font-size: 55px;\r\n    }\r\n  }\r\n\r\n  div.poster-sidebar {\r\n    width: 25%;\r\n    /* flex: 1; */\r\n    display: flex;\r\n    background-color: #ec6917;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 95px;\r\n    padding-left: 15px;\r\n    color: #fefcfd;\r\n    writing-mode: vertical-rl;\r\n    text-orientation: mixed;\r\n    text-align: center;\r\n\r\n    b {\r\n      /* padding: 15px; */\r\n    }\r\n  }\r\n\r\n  font-size: 25px;\r\n  line-height: 20px;\r\n`;\r\n\r\nexport default Poster;\r\n","import styled from 'styled-components';\r\n\r\nimport { darken } from 'polished';\r\n\r\nconst CopyButton = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex: 1;\r\n\r\n  button {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: center;\r\n\r\n    background: #26151b;\r\n    color: #cabfad;\r\n    border: 0;\r\n    border-radius: 4px;\r\n    padding: 12px 20px;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    transition: background 0.5s;\r\n    width: 100%;\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n    transition: box-shadow 500ms;\r\n\r\n    &:hover {\r\n      background: ${darken(0.05, '#26151b')};\r\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CopyButton;\r\n","import styled from 'styled-components';\r\n\r\nconst Footer = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n\r\n  background-color: #26151b;\r\n  color: #cabfad;\r\n\r\n  font-size: 25px;\r\n  line-height: 20px;\r\n\r\n  padding-top: 15px;\r\n  padding-bottom: 8px;\r\n  padding-left: 15px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: #edddc7;\r\n  }\r\n\r\n  small {\r\n    font-size: 15px;\r\n    float: left;\r\n  }\r\n\r\n  div#footer-last-line span {\r\n    float: right;\r\n    font-size: 12px;\r\n    padding-right: 5px;\r\n  }\r\n`;\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { ToastContainer, Slide, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { FaRandom, FaRegClipboard } from 'react-icons/fa';\r\n\r\nimport generateSentences, {\r\n  generateParagraphs,\r\n  maxParagraphs,\r\n} from '../../../../src/lib/generateIpsum';\r\nimport { chooseLifePasta } from '../../../../src/lib/sentences';\r\n\r\nimport Container from '../../components/Container/index.js';\r\nimport Header from '../../components/Header/index.js';\r\nimport Poster from '../../components/Poster/index.js';\r\nimport CopyButton from '../../components/CopyButton/index.js';\r\nimport Footer from '../../components/Footer/index.js';\r\n\r\nexport default class Main extends Component {\r\n  state = {\r\n    chooseIpsum: chooseLifePasta,\r\n    sentences: 20,\r\n    paragraphs: 3,\r\n    ipsumType: 'sentences',\r\n    swear: true,\r\n    political: true,\r\n    copySuccess: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const chooseIpsum = localStorage.getItem('chooseIpsum');\r\n    const ipsumType = localStorage.getItem('ipsumType');\r\n    const sentences = localStorage.getItem('sentences');\r\n    const paragraphs = localStorage.getItem('paragraphs');\r\n    const swear = localStorage.getItem('swear');\r\n    const political = localStorage.getItem('political');\r\n\r\n    if (chooseIpsum) {\r\n      this.setState({ chooseIpsum: JSON.parse(chooseIpsum) });\r\n    }\r\n    if (ipsumType) {\r\n      this.setState({ ipsumType: JSON.parse(ipsumType) });\r\n    }\r\n    if (sentences) {\r\n      this.setState({ sentences: JSON.parse(sentences) });\r\n    }\r\n    if (paragraphs) {\r\n      this.setState({ paragraphs: JSON.parse(paragraphs) });\r\n    }\r\n    if (swear) {\r\n      this.setState({ swear: JSON.parse(swear) });\r\n    }\r\n    if (political) {\r\n      this.setState({ political: JSON.parse(political) });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(_, prevState) {\r\n    const {\r\n      chooseIpsum,\r\n      ipsumType,\r\n      sentences,\r\n      paragraphs,\r\n      swear,\r\n      political,\r\n    } = this.state;\r\n\r\n    if (prevState.chooseIpsum !== chooseIpsum) {\r\n      localStorage.setItem('chooseIpsum', JSON.stringify(chooseIpsum));\r\n    }\r\n    if (prevState.ipsumType !== ipsumType) {\r\n      localStorage.setItem('ipsumType', JSON.stringify(ipsumType));\r\n    }\r\n    if (prevState.sentences !== sentences) {\r\n      localStorage.setItem('sentences', JSON.stringify(sentences));\r\n    }\r\n    if (prevState.paragraphs !== paragraphs) {\r\n      localStorage.setItem('paragraphs', JSON.stringify(paragraphs));\r\n    }\r\n    if (prevState.swear !== swear) {\r\n      localStorage.setItem('swear', JSON.stringify(swear));\r\n    }\r\n    if (prevState.political !== political) {\r\n      localStorage.setItem('political', JSON.stringify(political));\r\n    }\r\n  }\r\n\r\n  sendCopyToClipboardSuccess() {\r\n    toast.success('Copied to clipboard!', {\r\n      position: 'bottom-right',\r\n      autoClose: 2500,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: false,\r\n      progress: undefined,\r\n    });\r\n  }\r\n\r\n  handleClickGenerate() {\r\n    const { sentences, paragraphs, ipsumType, swear, political } = this.state;\r\n\r\n    try {\r\n      switch (ipsumType) {\r\n        case 'sentences':\r\n          this.setState({\r\n            chooseIpsum: generateSentences(sentences, swear, political),\r\n          });\r\n          break;\r\n        case 'paragraphs':\r\n          this.setState({\r\n            chooseIpsum: generateParagraphs(paragraphs, swear, political),\r\n          });\r\n          break;\r\n        default:\r\n          toast.error('Unknown type of ipsum!', {\r\n            position: 'bottom-right',\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          });\r\n      }\r\n    } catch (e) {\r\n      if (ipsumType === 'sentences' && e instanceof RangeError) {\r\n        toast.error(\r\n          `Too many sentences. Maximum number is ${e.message}; requested: ${sentences}`,\r\n          {\r\n            position: 'bottom-right',\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          }\r\n        );\r\n        this.setState({\r\n          sentences: e.message, // Max number of sentences depends on whether 'swear' and 'political' options are checked\r\n        });\r\n      } else if (ipsumType === 'paragraphs' && e instanceof RangeError) {\r\n        toast.error(\r\n          `Too many paragraphs. Maximum number is ${maxParagraphs}; requested: ${paragraphs}`,\r\n          {\r\n            position: 'bottom-right',\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          }\r\n        );\r\n        this.setState({\r\n          paragraphs: maxParagraphs,\r\n        });\r\n      }\r\n    }\r\n    // console.log(this.state.chooseIpsum);\r\n  }\r\n\r\n  handleNumberInputChange = (changeInputEvent) => {\r\n    if (changeInputEvent.currentTarget.value < 0) {\r\n      changeInputEvent.currentTarget.value = -changeInputEvent.currentTarget\r\n        .value;\r\n    }\r\n\r\n    this.setState({\r\n      [this.state.ipsumType]: changeInputEvent.currentTarget.value,\r\n    });\r\n    // console.log(this.state.sentences);\r\n  };\r\n\r\n  handleCheckboxChange(toggleCheckboxEvent) {\r\n    this.setState({\r\n      [toggleCheckboxEvent.currentTarget.value]:\r\n        toggleCheckboxEvent.currentTarget.checked,\r\n    });\r\n    console.log({\r\n      [toggleCheckboxEvent.currentTarget.value]:\r\n        toggleCheckboxEvent.currentTarget.checked,\r\n    });\r\n  }\r\n\r\n  handleRadioChange(changeRadioInputEvent) {\r\n    this.setState({\r\n      ipsumType: changeRadioInputEvent.currentTarget.value,\r\n    });\r\n    console.log(this.state.ipsumType);\r\n  }\r\n\r\n  // Generate lorem ipsum when user press Enter on input form\r\n  handleOnKeyDownHandler = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.handleClickGenerate();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { chooseIpsum, swear, political } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Header>\r\n            <div className=\"text-choose item flex-item-1\">\r\n              Choose{' '}\r\n              <input\r\n                type=\"number\"\r\n                value={this.state[this.state.ipsumType]}\r\n                onChange={this.handleNumberInputChange}\r\n                onKeyDown={this.handleOnKeyDownHandler}\r\n              ></input>\r\n            </div>\r\n\r\n            <div className=\"selector-choose item flex-item-1\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"sentences\"\r\n                name=\"type\"\r\n                value=\"sentences\"\r\n                defaultChecked\r\n                onChange={(e) => this.handleRadioChange(e)}\r\n              />\r\n              <label htmlFor=\"sentences\">sentences</label>\r\n\r\n              <br />\r\n\r\n              <input\r\n                type=\"radio\"\r\n                id=\"paragraphs\"\r\n                name=\"type\"\r\n                value=\"paragraphs\"\r\n                onChange={(e) => this.handleRadioChange(e)}\r\n              />\r\n              <label htmlFor=\"paragraphs\">paragraphs</label>\r\n            </div>\r\n\r\n            <div className=\"button-random item flex-item-1\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"swear\"\r\n                name=\"type\"\r\n                value=\"swear\"\r\n                onChange={(e) => this.handleCheckboxChange(e)}\r\n                checked={swear}\r\n              />\r\n              <label htmlFor=\"swear\">swear</label>\r\n\r\n              <br />\r\n\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"political\"\r\n                name=\"type\"\r\n                value=\"political\"\r\n                checked={political}\r\n                onChange={(e) => this.handleCheckboxChange(e)}\r\n              />\r\n              <label htmlFor=\"political\">political</label>\r\n            </div>\r\n\r\n            <div className=\"button-random item flex-item-1\">\r\n              <button onClick={() => this.handleClickGenerate()}>\r\n                <FaRandom color={'#ccc'} /> Generate\r\n              </button>\r\n            </div>\r\n          </Header>\r\n\r\n          <Poster>\r\n            <div className=\"poster-frame\">\r\n              <div className=\"poster-content\">\r\n                <p>\r\n                  {Array.isArray(chooseIpsum)\r\n                    ? chooseIpsum.join('\\n\\n')\r\n                    : chooseIpsum}\r\n                </p>\r\n                <div className=\"poster-footer\">\r\n                  <h2>Choose lorem.</h2>\r\n                  <h1>Choose ipsum.</h1>\r\n                </div>\r\n              </div>\r\n              <div className=\"poster-sidebar\">\r\n                <b>Choose Ipsum</b>\r\n              </div>\r\n            </div>\r\n          </Poster>\r\n\r\n          <CopyButton>\r\n            <CopyToClipboard text={chooseIpsum}>\r\n              <button onClick={() => this.sendCopyToClipboardSuccess()}>\r\n                <FaRegClipboard color={'#ccc'} /> Choose\r\n              </button>\r\n            </CopyToClipboard>\r\n          </CopyButton>\r\n          <ToastContainer transition={Slide} />\r\n        </Container>\r\n\r\n        <div className=\"page-container\">\r\n          <Footer>\r\n            <b>\r\n              built by{' '}\r\n              <a href=\"https://www.github.com/AtilioA/ChooseIpsum\">AtilioA</a>.\r\n            </b>\r\n            <br />\r\n            <div id=\"footer-last-line\">\r\n              <small>\r\n                This work has been inspired by Trainspotting quotes written by\r\n                Irvine Welsh.\r\n              </small>\r\n              <span>\r\n                <a href=\"https://github.com/AtilioA/ChooseIpsum#%E2%9A%99-api-wip\">API</a>\r\n              </span>\r\n            </div>\r\n          </Footer>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from './pages/Main';\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={Main} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n  html, body, #root {\r\n    ${'' /* min-height: 100%; */}\r\n    height: 95%;\r\n  }\r\n\r\n  body {\r\n    background: #ec6917;\r\n    -webkit-font-smoothing: antialiased !important;\r\n    margin-bottom: 60px;\r\n  }\r\n\r\n  .page-content {\r\n    flex: 1;\r\n  }\r\n\r\n  body, input, button {\r\n    color: #222;\r\n    font-size: 16px;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport Routes from './routes';\r\n\r\nimport GlobalStyle from './styles/global';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Routes />\r\n      <GlobalStyle />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}